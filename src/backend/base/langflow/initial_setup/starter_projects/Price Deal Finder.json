{
  "data": {
    "edges": [
      {
        "data": {
          "sourceHandle": {
            "dataType": "AgentQL",
            "id": "AgentQL-qCiM5",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-03SGo",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__AgentQL-qCiM5{œdataTypeœ:œAgentQLœ,œidœ:œAgentQL-qCiM5œ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-03SGo{œfieldNameœ:œtoolsœ,œidœ:œAgent-03SGoœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "source": "AgentQL-qCiM5",
        "sourceHandle": "{œdataTypeœ: œAgentQLœ, œidœ: œAgentQL-qCiM5œ, œnameœ: œcomponent_as_toolœ, œoutput_typesœ: [œToolœ]}",
        "target": "Agent-03SGo",
        "targetHandle": "{œfieldNameœ: œtoolsœ, œidœ: œAgent-03SGoœ, œinputTypesœ: [œToolœ], œtypeœ: œotherœ}"
      },
      {
        "data": {
          "sourceHandle": {
            "dataType": "TavilySearchComponent",
            "id": "TavilySearchComponent-nWDnP",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-03SGo",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__TavilySearchComponent-nWDnP{œdataTypeœ:œTavilySearchComponentœ,œidœ:œTavilySearchComponent-nWDnPœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-03SGo{œfieldNameœ:œtoolsœ,œidœ:œAgent-03SGoœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "source": "TavilySearchComponent-nWDnP",
        "sourceHandle": "{œdataTypeœ: œTavilySearchComponentœ, œidœ: œTavilySearchComponent-nWDnPœ, œnameœ: œcomponent_as_toolœ, œoutput_typesœ: [œToolœ]}",
        "target": "Agent-03SGo",
        "targetHandle": "{œfieldNameœ: œtoolsœ, œidœ: œAgent-03SGoœ, œinputTypesœ: [œToolœ], œtypeœ: œotherœ}"
      },
      {
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-fJHKg",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-03SGo",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ChatInput-fJHKg{œdataTypeœ:œChatInputœ,œidœ:œChatInput-fJHKgœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-03SGo{œfieldNameœ:œinput_valueœ,œidœ:œAgent-03SGoœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "source": "ChatInput-fJHKg",
        "sourceHandle": "{œdataTypeœ: œChatInputœ, œidœ: œChatInput-fJHKgœ, œnameœ: œmessageœ, œoutput_typesœ: [œMessageœ]}",
        "target": "Agent-03SGo",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œAgent-03SGoœ, œinputTypesœ: [œMessageœ], œtypeœ: œstrœ}"
      },
      {
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-03SGo",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-ykhew",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__Agent-03SGo{œdataTypeœ:œAgentœ,œidœ:œAgent-03SGoœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-ykhew{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-ykhewœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}",
        "source": "Agent-03SGo",
        "sourceHandle": "{œdataTypeœ: œAgentœ, œidœ: œAgent-03SGoœ, œnameœ: œresponseœ, œoutput_typesœ: [œMessageœ]}",
        "target": "ChatOutput-ykhew",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œChatOutput-ykhewœ, œinputTypesœ: [œDataœ, œDataFrameœ, œMessageœ], œtypeœ: œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "ChatInput-fJHKg",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "inputs",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "key": "ChatInput",
            "legacy": false,
            "lf_version": "1.3.2",
            "metadata": {
              "code_hash": "46a90558cb44",
              "dependencies": {
                "dependencies": [
                  {
                    "name": "lfx",
                    "version": null
                  }
                ],
                "total_dependencies": 1
              },
              "module": "lfx.components.input_output.chat.ChatInput"
            },
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Chat Message",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.0020353564437605998,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from lfx.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom lfx.base.io.chat import ChatComponent\nfrom lfx.inputs.inputs import BoolInput\nfrom lfx.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom lfx.schema.message import Message\nfrom lfx.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-input\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Chat Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "csv",
                  "json",
                  "pdf",
                  "txt",
                  "md",
                  "mdx",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "list_add_label": "Add More",
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "display_name": "Input Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "iPhone 16 Pro 512 GB"
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "selected_output": "message",
          "showNode": false,
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-fJHKg",
        "measured": {
          "height": 48,
          "width": 192
        },
        "position": {
          "x": 62.33311391612975,
          "y": 677.8206598034913
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatOutput-ykhew",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "outputs",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "key": "ChatOutput",
            "legacy": false,
            "lf_version": "1.3.2",
            "metadata": {
              "code_hash": "11782d1755f3",
              "dependencies": {
                "dependencies": [
                  {
                    "name": "orjson",
                    "version": "3.10.15"
                  },
                  {
                    "name": "fastapi",
                    "version": "0.116.1"
                  },
                  {
                    "name": "i18n",
                    "version": "0.16.0"
                  },
                  {
                    "name": "lfx",
                    "version": null
                  }
                ],
                "total_dependencies": 4
              },
              "module": "lfx.components.input_output.chat_output.ChatOutput"
            },
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Message",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.00012027401062119145,
            "template": {
              "_type": "Component",
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean data before converting to string.",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\nimport i18n\n\nfrom lfx.base.io.chat import ChatComponent\nfrom lfx.helpers.data import safe_convert\nfrom lfx.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom lfx.schema.data import Data\nfrom lfx.schema.dataframe import DataFrame\nfrom lfx.schema.message import Message\nfrom lfx.schema.properties import Source\nfrom lfx.template.field.base import Output\nfrom lfx.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = i18n.t('components.input_output.chat_output.display_name')\n    description = i18n.t('components.input_output.chat_output.description')\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=i18n.t(\n                'components.input_output.chat_output.input_value.display_name'),\n            info=i18n.t(\n                'components.input_output.chat_output.input_value.info'),\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=i18n.t(\n                'components.input_output.chat_output.should_store_message.display_name'),\n            info=i18n.t(\n                'components.input_output.chat_output.should_store_message.info'),\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=i18n.t(\n                'components.input_output.chat_output.sender.display_name'),\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=i18n.t('components.input_output.chat_output.sender.info'),\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=i18n.t(\n                'components.input_output.chat_output.sender_name.display_name'),\n            info=i18n.t(\n                'components.input_output.chat_output.sender_name.info'),\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=i18n.t(\n                'components.input_output.chat_output.session_id.display_name'),\n            info=i18n.t('components.input_output.chat_output.session_id.info'),\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=i18n.t(\n                'components.input_output.chat_output.data_template.display_name'),\n            value=\"{text}\",\n            advanced=True,\n            info=i18n.t(\n                'components.input_output.chat_output.data_template.info'),\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=i18n.t(\n                'components.input_output.chat_output.clean_data.display_name'),\n            value=True,\n            advanced=True,\n            info=i18n.t('components.input_output.chat_output.clean_data.info'),\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=i18n.t(\n                'components.input_output.chat_output.outputs.message.display_name'),\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(\n            self, \"graph\") else None\n        message.properties.source = self._build_source(\n            source_id, display_name, source)\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(\n            serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = i18n.t(\n                'components.input_output.chat_output.errors.input_cannot_be_none')\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = i18n.t(\n                'components.input_output.chat_output.errors.invalid_list_types', types=invalid_types)\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = i18n.t(\n                'components.input_output.chat_output.errors.invalid_input_type', type=type_name)\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            clean_data: bool = getattr(self, \"clean_data\", False)\n            return \"\\n\".join([safe_convert(item, clean_data=clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Inputs",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-ykhew",
        "measured": {
          "height": 48,
          "width": 192
        },
        "position": {
          "x": 1239.8390470797185,
          "y": 313.42117075262695
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TavilySearchComponent-nWDnP",
          "node": {
            "base_classes": [
              "Data",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "**Tavily Search** is a search engine optimized for LLMs and RAG, aimed at efficient, quick, and persistent search results.",
            "display_name": "Tavily AI Search",
            "documentation": "",
            "edited": false,
            "field_order": [
              "api_key",
              "query",
              "search_depth",
              "topic",
              "time_range",
              "max_results",
              "include_images",
              "include_answer"
            ],
            "frozen": false,
            "icon": "TavilyIcon",
            "legacy": false,
            "lf_version": "1.3.2",
            "metadata": {
              "code_hash": "aedfcd9a0697",
              "dependencies": {
                "dependencies": [
                  {
                    "name": "i18n",
                    "version": "0.16.0"
                  },
                  {
                    "name": "httpx",
                    "version": "0.28.1"
                  },
                  {
                    "name": "lfx",
                    "version": null
                  }
                ],
                "total_dependencies": 3
              },
              "module": "lfx.components.tavily.tavily_search.TavilySearchComponent"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Tavily API Key",
                "dynamic": false,
                "info": "Your Tavily API Key.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "TAVILY_API_KEY"
              },
              "chunks_per_source": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Chunks Per Source",
                "dynamic": false,
                "info": "The number of content chunks to retrieve from each source (1-3). Only works with advanced search.",
                "list": false,
                "list_add_label": "Add More",
                "name": "chunks_per_source",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 3
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import i18n\nimport httpx\n\nfrom lfx.custom.custom_component.component import Component\nfrom lfx.inputs.inputs import BoolInput, DropdownInput, IntInput, MessageTextInput, SecretStrInput\nfrom lfx.log.logger import logger\nfrom lfx.schema.data import Data\nfrom lfx.schema.dataframe import DataFrame\nfrom lfx.template.field.base import Output\n\n\nclass TavilySearchComponent(Component):\n    display_name = i18n.t('components.tavily.tavily_search.display_name')\n    description = i18n.t('components.tavily.tavily_search.description')\n    icon = \"TavilyIcon\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=i18n.t(\n                'components.tavily.tavily_search.api_key.display_name'),\n            required=True,\n            info=i18n.t('components.tavily.tavily_search.api_key.info'),\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=i18n.t(\n                'components.tavily.tavily_search.query.display_name'),\n            info=i18n.t('components.tavily.tavily_search.query.info'),\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"search_depth\",\n            display_name=i18n.t(\n                'components.tavily.tavily_search.search_depth.display_name'),\n            info=i18n.t('components.tavily.tavily_search.search_depth.info'),\n            options=[\"basic\", \"advanced\"],\n            value=\"advanced\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chunks_per_source\",\n            display_name=i18n.t(\n                'components.tavily.tavily_search.chunks_per_source.display_name'),\n            info=i18n.t(\n                'components.tavily.tavily_search.chunks_per_source.info'),\n            value=3,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"topic\",\n            display_name=i18n.t(\n                'components.tavily.tavily_search.topic.display_name'),\n            info=i18n.t('components.tavily.tavily_search.topic.info'),\n            options=[\"general\", \"news\"],\n            value=\"general\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"days\",\n            display_name=i18n.t(\n                'components.tavily.tavily_search.days.display_name'),\n            info=i18n.t('components.tavily.tavily_search.days.info'),\n            value=7,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_results\",\n            display_name=i18n.t(\n                'components.tavily.tavily_search.max_results.display_name'),\n            info=i18n.t('components.tavily.tavily_search.max_results.info'),\n            value=5,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_answer\",\n            display_name=i18n.t(\n                'components.tavily.tavily_search.include_answer.display_name'),\n            info=i18n.t('components.tavily.tavily_search.include_answer.info'),\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"time_range\",\n            display_name=i18n.t(\n                'components.tavily.tavily_search.time_range.display_name'),\n            info=i18n.t('components.tavily.tavily_search.time_range.info'),\n            options=[\"day\", \"week\", \"month\", \"year\"],\n            value=None,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_images\",\n            display_name=i18n.t(\n                'components.tavily.tavily_search.include_images.display_name'),\n            info=i18n.t('components.tavily.tavily_search.include_images.info'),\n            value=True,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"include_domains\",\n            display_name=i18n.t(\n                'components.tavily.tavily_search.include_domains.display_name'),\n            info=i18n.t(\n                'components.tavily.tavily_search.include_domains.info'),\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"exclude_domains\",\n            display_name=i18n.t(\n                'components.tavily.tavily_search.exclude_domains.display_name'),\n            info=i18n.t(\n                'components.tavily.tavily_search.exclude_domains.info'),\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_raw_content\",\n            display_name=i18n.t(\n                'components.tavily.tavily_search.include_raw_content.display_name'),\n            info=i18n.t(\n                'components.tavily.tavily_search.include_raw_content.info'),\n            value=False,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=i18n.t(\n                'components.tavily.tavily_search.outputs.dataframe.display_name'),\n            name=\"dataframe\",\n            method=\"fetch_content_dataframe\"\n        ),\n    ]\n\n    def fetch_content(self) -> list[Data]:\n        try:\n            # Only process domains if they're provided\n            include_domains = None\n            exclude_domains = None\n\n            if self.include_domains:\n                include_domains = [\n                    domain.strip() for domain in self.include_domains.split(\",\") if domain.strip()]\n\n            if self.exclude_domains:\n                exclude_domains = [\n                    domain.strip() for domain in self.exclude_domains.split(\",\") if domain.strip()]\n\n            url = \"https://api.tavily.com/search\"\n            headers = {\n                \"content-type\": \"application/json\",\n                \"accept\": \"application/json\",\n            }\n\n            payload = {\n                \"api_key\": self.api_key,\n                \"query\": self.query,\n                \"search_depth\": self.search_depth,\n                \"topic\": self.topic,\n                \"max_results\": self.max_results,\n                \"include_images\": self.include_images,\n                \"include_answer\": self.include_answer,\n                \"include_raw_content\": self.include_raw_content,\n                \"days\": self.days,\n                \"time_range\": self.time_range,\n            }\n\n            # Only add domains to payload if they exist and have values\n            if include_domains:\n                payload[\"include_domains\"] = include_domains\n            if exclude_domains:\n                payload[\"exclude_domains\"] = exclude_domains\n\n            # Add conditional parameters only if they should be included\n            if self.search_depth == \"advanced\" and self.chunks_per_source:\n                payload[\"chunks_per_source\"] = self.chunks_per_source\n\n            if self.topic == \"news\" and self.days:\n                payload[\"days\"] = int(self.days)  # Ensure days is an integer\n\n            # Add time_range if it's set\n            if hasattr(self, \"time_range\") and self.time_range:\n                payload[\"time_range\"] = self.time_range\n\n            # Add timeout handling\n            with httpx.Client(timeout=90.0) as client:\n                response = client.post(url, json=payload, headers=headers)\n\n            response.raise_for_status()\n            search_results = response.json()\n\n            data_results = []\n\n            if self.include_answer and search_results.get(\"answer\"):\n                data_results.append(Data(text=search_results[\"answer\"]))\n\n            for result in search_results.get(\"results\", []):\n                content = result.get(\"content\", \"\")\n                result_data = {\n                    \"title\": result.get(\"title\"),\n                    \"url\": result.get(\"url\"),\n                    \"content\": content,\n                    \"score\": result.get(\"score\"),\n                }\n                if self.include_raw_content:\n                    result_data[\"raw_content\"] = result.get(\"raw_content\")\n\n                data_results.append(Data(text=content, data=result_data))\n\n            if self.include_images and search_results.get(\"images\"):\n                data_results.append(Data(text=\"Images found\", data={\n                                    \"images\": search_results[\"images\"]}))\n\n        except httpx.TimeoutException:\n            error_message = \"Request timed out (90s). Please try again or adjust parameters.\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        except httpx.HTTPStatusError as exc:\n            error_message = f\"HTTP error occurred: {exc.response.status_code} - {exc.response.text}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        except httpx.RequestError as exc:\n            error_message = f\"Request error occurred: {exc}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        except ValueError as exc:\n            error_message = f\"Invalid response format: {exc}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        else:\n            self.status = data_results\n            return data_results\n\n    def fetch_content_dataframe(self) -> DataFrame:\n        data = self.fetch_content()\n        return DataFrame(data)\n"
              },
              "days": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Days",
                "dynamic": false,
                "info": "Number of days back from current date to include. Only available with news topic.",
                "list": false,
                "list_add_label": "Add More",
                "name": "days",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 7
              },
              "exclude_domains": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Exclude Domains",
                "dynamic": false,
                "info": "Comma-separated list of domains to exclude from the search results.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "exclude_domains",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "include_answer": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Include Answer",
                "dynamic": false,
                "info": "Include a short answer to original query.",
                "list": false,
                "list_add_label": "Add More",
                "name": "include_answer",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "include_domains": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Include Domains",
                "dynamic": false,
                "info": "Comma-separated list of domains to include in the search results.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "include_domains",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "include_images": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Include Images",
                "dynamic": false,
                "info": "Include a list of query-related images in the response.",
                "list": false,
                "list_add_label": "Add More",
                "name": "include_images",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "include_raw_content": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Include Raw Content",
                "dynamic": false,
                "info": "Include the cleaned and parsed HTML content of each search result.",
                "list": false,
                "list_add_label": "Add More",
                "name": "include_raw_content",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_results": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Results",
                "dynamic": false,
                "info": "The maximum number of search results to return.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_results",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Search Query",
                "dynamic": false,
                "info": "The search query you want to execute with Tavily.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "query",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "search_depth": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Search Depth",
                "dynamic": false,
                "info": "The depth of the search.",
                "name": "search_depth",
                "options": [
                  "basic",
                  "advanced"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "advanced"
              },
              "time_range": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Time Range",
                "dynamic": false,
                "info": "The time range back from the current date to filter results.",
                "name": "time_range",
                "options": [
                  "day",
                  "week",
                  "month",
                  "year"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "query": {
                        "default": "",
                        "description": "The search query you want to execute with Tavily.",
                        "title": "Query",
                        "type": "string"
                      }
                    },
                    "description": "**Tavily Search** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                    "display_description": "**Tavily Search** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                    "display_name": "fetch_content_dataframe",
                    "name": "fetch_content_dataframe",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "fetch_content_dataframe"
                    ]
                  }
                ]
              },
              "topic": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Search Topic",
                "dynamic": false,
                "info": "The category of the search.",
                "name": "topic",
                "options": [
                  "general",
                  "news"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "general"
              }
            },
            "tool_mode": true
          },
          "selected_output": "component_as_tool",
          "showNode": true,
          "type": "TavilySearchComponent"
        },
        "dragging": false,
        "id": "TavilySearchComponent-nWDnP",
        "measured": {
          "height": 316,
          "width": 320
        },
        "position": {
          "x": 39.12408438765479,
          "y": 180.97658284912208
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Uses AgentQL API to extract structured data from a given URL.",
          "display_name": "AgentQL Query Data",
          "id": "AgentQL-qCiM5",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Extract structured data from web pages using AgentQL queries.",
            "display_name": "Extract Web Data",
            "documentation": "https://docs.agentql.com/rest-api/api-reference",
            "edited": false,
            "field_order": [
              "api_key",
              "url",
              "query",
              "prompt",
              "is_stealth_mode_enabled",
              "timeout",
              "mode",
              "wait_for",
              "is_scroll_to_bottom_enabled",
              "is_screenshot_enabled"
            ],
            "frozen": false,
            "icon": "Globe",
            "legacy": false,
            "lf_version": "1.3.2",
            "metadata": {
              "code_hash": "21bb59fa9422",
              "dependencies": {
                "dependencies": [
                  {
                    "name": "i18n",
                    "version": "0.16.0"
                  },
                  {
                    "name": "lfx",
                    "version": null
                  },
                  {
                    "name": "agentql",
                    "version": null
                  }
                ],
                "total_dependencies": 3
              },
              "module": "lfx.components.agentql.agentql_api.AgentQL"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "API Key",
                "dynamic": false,
                "info": "AgentQL API key for authentication (optional, can be set via environment variable).",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "AGENTQL_API_KEY"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import i18n\n\nfrom lfx.custom.custom_component.component import Component\nfrom lfx.field_typing.range_spec import RangeSpec\nfrom lfx.io import BoolInput, DropdownInput, IntInput, MessageTextInput, MultilineInput, Output, SecretStrInput\nfrom lfx.log.logger import logger\nfrom lfx.schema.data import Data\n\n\nclass AgentQL(Component):\n    display_name = i18n.t('components.agentql.agentql_api.display_name')\n    description = i18n.t('components.agentql.agentql_api.description')\n    documentation: str = \"https://docs.agentql.com/\"\n    icon = \"Globe\"\n    name = \"AgentQL\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"url\",\n            display_name=i18n.t(\n                'components.agentql.agentql_api.url.display_name'),\n            required=True,\n            info=i18n.t('components.agentql.agentql_api.url.info'),\n        ),\n        MultilineInput(\n            name=\"query\",\n            display_name=i18n.t(\n                'components.agentql.agentql_api.query.display_name'),\n            required=True,\n            info=i18n.t('components.agentql.agentql_api.query.info'),\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=i18n.t(\n                'components.agentql.agentql_api.api_key.display_name'),\n            required=False,\n            info=i18n.t('components.agentql.agentql_api.api_key.info'),\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"mode\",\n            display_name=i18n.t(\n                'components.agentql.agentql_api.mode.display_name'),\n            options=[\"standard\", \"fast\"],\n            value=\"standard\",\n            info=i18n.t('components.agentql.agentql_api.mode.info'),\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"is_scroll_to_bottom\",\n            display_name=i18n.t(\n                'components.agentql.agentql_api.is_scroll_to_bottom.display_name'),\n            value=False,\n            info=i18n.t(\n                'components.agentql.agentql_api.is_scroll_to_bottom.info'),\n            advanced=True,\n        ),\n        IntInput(\n            name=\"wait_for_page\",\n            display_name=i18n.t(\n                'components.agentql.agentql_api.wait_for_page.display_name'),\n            value=5000,\n            info=i18n.t('components.agentql.agentql_api.wait_for_page.info'),\n            range_spec=RangeSpec(min=0, max=60000, step=100),\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"is_return_markdown\",\n            display_name=i18n.t(\n                'components.agentql.agentql_api.is_return_markdown.display_name'),\n            value=False,\n            info=i18n.t(\n                'components.agentql.agentql_api.is_return_markdown.info'),\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=i18n.t(\n                'components.agentql.agentql_api.outputs.data.display_name'),\n            name=\"data\",\n            method=\"extract_data\",\n        ),\n    ]\n\n    def extract_data(self) -> Data:\n        \"\"\"Extract data from a web page using AgentQL.\"\"\"\n        try:\n            # Validate required inputs\n            if not self.url or not self.url.strip():\n                error_msg = i18n.t(\n                    'components.agentql.agentql_api.errors.url_required')\n                self.status = error_msg\n                raise ValueError(error_msg)\n\n            if not self.query or not self.query.strip():\n                error_msg = i18n.t(\n                    'components.agentql.agentql_api.errors.query_required')\n                self.status = error_msg\n                raise ValueError(error_msg)\n\n            # Import AgentQL\n            try:\n                import agentql\n            except ImportError as e:\n                error_msg = i18n.t(\n                    'components.agentql.agentql_api.errors.agentql_not_installed')\n                self.status = error_msg\n                raise ImportError(error_msg) from e\n\n            self.status = i18n.t(\n                'components.agentql.agentql_api.status.initializing')\n\n            # Configure API key if provided\n            api_key = getattr(self, \"api_key\", None)\n            if api_key and api_key.strip():\n                try:\n                    agentql.configure(api_key=api_key)\n                    logger.info(\n                        i18n.t('components.agentql.agentql_api.logs.api_key_configured'))\n                except Exception as e:\n                    warning_msg = i18n.t('components.agentql.agentql_api.warnings.api_key_config_failed',\n                                         error=str(e))\n                    logger.warning(warning_msg)\n\n            # Get configuration parameters\n            mode = getattr(self, \"mode\", \"standard\")\n            is_scroll_to_bottom = getattr(self, \"is_scroll_to_bottom\", False)\n            wait_for_page = getattr(self, \"wait_for_page\", 5000)\n            is_return_markdown = getattr(self, \"is_return_markdown\", False)\n\n            self.status = i18n.t(\n                'components.agentql.agentql_api.status.connecting', url=self.url)\n\n            # Initialize browser and page\n            try:\n                browser = agentql.start_browser()\n                page = browser.new_page()\n\n                # Navigate to URL\n                page.goto(self.url)\n                logger.info(\n                    i18n.t('components.agentql.agentql_api.logs.page_loaded', url=self.url))\n\n            except Exception as e:\n                error_msg = i18n.t(\n                    'components.agentql.agentql_api.errors.browser_init_failed', error=str(e))\n                self.status = error_msg\n                raise RuntimeError(error_msg) from e\n\n            try:\n                # Wait for page to load\n                if wait_for_page > 0:\n                    self.status = i18n.t('components.agentql.agentql_api.status.waiting_for_page',\n                                         milliseconds=wait_for_page)\n                    page.wait_for_timeout(wait_for_page)\n\n                # Scroll to bottom if enabled\n                if is_scroll_to_bottom:\n                    self.status = i18n.t(\n                        'components.agentql.agentql_api.status.scrolling_to_bottom')\n                    try:\n                        page.evaluate(\n                            \"window.scrollTo(0, document.body.scrollHeight)\")\n                        # Wait for content to load after scroll\n                        page.wait_for_timeout(1000)\n                        logger.info(\n                            i18n.t('components.agentql.agentql_api.logs.scrolled_to_bottom'))\n                    except Exception as e:\n                        warning_msg = i18n.t('components.agentql.agentql_api.warnings.scroll_failed',\n                                             error=str(e))\n                        logger.warning(warning_msg)\n\n                # Extract data using AgentQL query\n                self.status = i18n.t(\n                    'components.agentql.agentql_api.status.extracting_data')\n\n                try:\n                    if mode == \"fast\":\n                        response = page.query_data(self.query, mode=\"fast\")\n                    else:\n                        response = page.query_data(self.query)\n\n                    logger.info(\n                        i18n.t('components.agentql.agentql_api.logs.data_extracted'))\n\n                except Exception as e:\n                    error_msg = i18n.t('components.agentql.agentql_api.errors.query_execution_failed',\n                                       error=str(e))\n                    self.status = error_msg\n                    raise ValueError(error_msg) from e\n\n                # Process response\n                if response is None:\n                    warning_msg = i18n.t(\n                        'components.agentql.agentql_api.warnings.no_data_extracted')\n                    self.status = warning_msg\n                    return Data(data={\"message\": warning_msg})\n\n                # Convert response to dictionary\n                try:\n                    if hasattr(response, \"to_dict\"):\n                        data_dict = response.to_dict()\n                    elif hasattr(response, \"to_data\"):\n                        data_dict = response.to_data()\n                    elif isinstance(response, dict):\n                        data_dict = response\n                    else:\n                        data_dict = {\"content\": str(response)}\n\n                    logger.info(\n                        i18n.t('components.agentql.agentql_api.logs.response_converted'))\n\n                except Exception as e:\n                    warning_msg = i18n.t('components.agentql.agentql_api.warnings.response_conversion_failed',\n                                         error=str(e))\n                    logger.warning(warning_msg)\n                    data_dict = {\"content\": str(response)}\n\n                # Add markdown if requested\n                if is_return_markdown:\n                    try:\n                        self.status = i18n.t(\n                            'components.agentql.agentql_api.status.getting_markdown')\n                        markdown_content = page.get_content(format=\"markdown\")\n                        data_dict[\"markdown\"] = markdown_content\n                        logger.info(\n                            i18n.t('components.agentql.agentql_api.logs.markdown_added'))\n                    except Exception as e:\n                        warning_msg = i18n.t('components.agentql.agentql_api.warnings.markdown_extraction_failed',\n                                             error=str(e))\n                        logger.warning(warning_msg)\n                        data_dict[\"markdown_error\"] = str(e)\n\n                # Add metadata\n                data_dict[\"url\"] = self.url\n                data_dict[\"query\"] = self.query\n                data_dict[\"mode\"] = mode\n\n                success_msg = i18n.t('components.agentql.agentql_api.success.data_extracted',\n                                     fields=len(data_dict))\n                self.status = success_msg\n\n                return Data(data=data_dict)\n\n            finally:\n                # Clean up browser resources\n                try:\n                    if 'browser' in locals():\n                        browser.close()\n                        logger.info(\n                            i18n.t('components.agentql.agentql_api.logs.browser_closed'))\n                except Exception as e:\n                    warning_msg = i18n.t('components.agentql.agentql_api.warnings.browser_close_failed',\n                                         error=str(e))\n                    logger.warning(warning_msg)\n\n        except (ValueError, ImportError, RuntimeError) as e:\n            # Re-raise these as they already have i18n messages\n            raise\n        except Exception as e:\n            error_msg = i18n.t(\n                'components.agentql.agentql_api.errors.extraction_failed', error=str(e))\n            self.status = error_msg\n            logger.exception(error_msg)\n            raise ValueError(error_msg) from e\n"
              },
              "is_return_markdown": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Include Markdown",
                "dynamic": false,
                "info": "Include the page content in markdown format in the response.",
                "list": false,
                "list_add_label": "Add More",
                "name": "is_return_markdown",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "is_scroll_to_bottom": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Scroll to Bottom",
                "dynamic": false,
                "info": "Automatically scroll to the bottom of the page before extracting data.",
                "list": false,
                "list_add_label": "Add More",
                "name": "is_scroll_to_bottom",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "mode": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Query Mode",
                "dynamic": false,
                "info": "Query execution mode: 'standard' for accuracy, 'fast' for speed.",
                "name": "mode",
                "options": [
                  "standard",
                  "fast"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "fast"
              },
              "query": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "AgentQL Query",
                "dynamic": false,
                "info": "Natural language query describing the data you want to extract from the page.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "query",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "prompt": {
                        "default": "",
                        "description": "A Natural Language description of the data to extract from the page. Alternative to AgentQL query.",
                        "title": "Prompt",
                        "type": "string"
                      },
                      "query": {
                        "default": "",
                        "description": "The AgentQL query to execute. Learn more at https://docs.agentql.com/agentql-query or use a prompt.",
                        "title": "Query",
                        "type": "string"
                      },
                      "url": {
                        "description": "The URL of the public web page you want to extract data from.",
                        "title": "Url",
                        "type": "string"
                      }
                    },
                    "description": "Extracts structured data from a web page using an AgentQL query or a Natural Language description.",
                    "display_description": "Extracts structured data from a web page using an AgentQL query or a Natural Language description.",
                    "display_name": "build_output",
                    "name": "build_output",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "build_output"
                    ]
                  }
                ]
              },
              "url": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "URL",
                "dynamic": false,
                "info": "The URL of the web page to extract data from.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "url",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "wait_for_page": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Wait for Page (ms)",
                "dynamic": false,
                "info": "Time to wait for the page to load before extracting data (in milliseconds).",
                "list": false,
                "list_add_label": "Add More",
                "name": "wait_for_page",
                "placeholder": "",
                "range_spec": {
                  "max": 60000.0,
                  "min": 0.0,
                  "step": 100.0,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5000
              }
            },
            "tool_mode": true
          },
          "selected_output": "component_as_tool",
          "showNode": true,
          "type": "AgentQL"
        },
        "dragging": false,
        "id": "AgentQL-qCiM5",
        "measured": {
          "height": 316,
          "width": 320
        },
        "position": {
          "x": 419.9837597695889,
          "y": 103.27516079272866
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "note-Dw2MZ",
          "node": {
            "description": "### 💡 Add your OpenAI API key here",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "transparent"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "id": "note-Dw2MZ",
        "measured": {
          "height": 324,
          "width": 324
        },
        "position": {
          "x": 798.1532899902708,
          "y": 48.63976452163034
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "id": "note-3fanj",
          "node": {
            "description": "### 💡 Add your AgentQL API key here",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "transparent"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "height": 346,
        "id": "note-3fanj",
        "measured": {
          "height": 346,
          "width": 324
        },
        "position": {
          "x": 416.2302078823729,
          "y": 51.23403819068896
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "id": "note-L77iu",
          "node": {
            "description": "# Price Deal Finder \n\nThis flow searches and compares prices of a product on the web.\n## Prerequisites\n\n* **[AgentQL API Key](https://dev.agentql.com/api-keys)**\n* **[OpenAI API Key](https://platform.openai.com/)**\n* **[TavilyAI Search API Key](https://tavily.com/)**\n\n## Quick Start\n\n1. Add your [AgentQL API Key](https://dev.agentql.com/api-keys) to the **AgentQL** component.\n2. Add your [OpenAI API Key](https://platform.openai.com/) to the **Agent** component.\n3. Add your [TavilyAI Search API Key](https://tavily.com/) to the **Tavily AI Search** component.\n4. Click **Playground** and enter a product in chat. For example, search \"iPhone 16 Pro 512 GB\")\n* The **Agent** component populates the **Tavily AI Search** component's **Search Query** field, and the **Agent QL** component's **URL** and **Query** fields. \n\n* The **Agent** returns a structured response to your searcn in the chat.",
            "display_name": "",
            "documentation": "",
            "template": {}
          },
          "type": "note"
        },
        "dragging": false,
        "height": 674,
        "id": "note-L77iu",
        "measured": {
          "height": 674,
          "width": 466
        },
        "position": {
          "x": -472.5459222813072,
          "y": 102.70113417861305
        },
        "resizing": false,
        "selected": false,
        "type": "noteNode",
        "width": 466
      },
      {
        "data": {
          "id": "note-Op67v",
          "node": {
            "description": "### 💡 Add your Tavily AI Search key here",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "transparent"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "height": 324,
        "id": "note-Op67v",
        "measured": {
          "height": 324,
          "width": 345
        },
        "position": {
          "x": 25.144734571805117,
          "y": 126.6122587862217
        },
        "resizing": false,
        "selected": false,
        "type": "noteNode",
        "width": 345
      },
      {
        "data": {
          "id": "Agent-03SGo",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "agents",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Agent",
            "documentation": "",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "n_messages",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "key": "Agent",
            "legacy": false,
            "metadata": {
              "code_hash": "52d208e7874e",
              "dependencies": {
                "dependencies": [
                  {
                    "name": "i18n",
                    "version": "0.16.0"
                  },
                  {
                    "name": "langchain_core",
                    "version": "0.3.75"
                  },
                  {
                    "name": "pydantic",
                    "version": "2.10.6"
                  },
                  {
                    "name": "lfx",
                    "version": null
                  }
                ],
                "total_dependencies": 4
              },
              "module": "lfx.components.agents.agent.AgentComponent"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "group_outputs": false,
                "method": "message_response",
                "name": "response",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 1.1732828199964098e-19,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Anthropic",
                  "Google Generative AI",
                  "OpenAI"
                ],
                "options_metadata": [
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "OPENAI_API_KEY"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nimport re\nimport i18n\n\nfrom langchain_core.tools import StructuredTool, Tool\nfrom pydantic import ValidationError\n\nfrom lfx.base.agents.agent import LCToolsAgentComponent\nfrom lfx.base.agents.events import ExceptionWithMessageError\nfrom lfx.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom lfx.base.models.model_utils import get_model_name\nfrom lfx.components.helpers.current_date import CurrentDateComponent\nfrom lfx.components.helpers.memory import MemoryComponent\nfrom lfx.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom lfx.custom.custom_component.component import get_component_toolkit\nfrom lfx.custom.utils import update_component_build_config\nfrom lfx.helpers.base_model import build_model_from_schema\nfrom lfx.inputs.inputs import BoolInput\nfrom lfx.io import DropdownInput, IntInput, MultilineInput, Output, TableInput\nfrom lfx.log.logger import logger\nfrom lfx.schema.data import Data\nfrom lfx.schema.dotdict import dotdict\nfrom lfx.schema.message import Message\nfrom lfx.schema.table import EditMode\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nMODEL_PROVIDERS_LIST = [\"Anthropic\", \"Google Generative AI\", \"OpenAI\"]\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = i18n.t('components.agents.agent.display_name')\n    description: str = i18n.t('components.agents.agent.description')\n    documentation: str = \"https://docs.langflow.org/agents\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input)\n                     for component_input in MemoryComponent().inputs]\n\n    # Filter out json_mode from OpenAI inputs since we handle structured output differently\n    if \"OpenAI\" in MODEL_PROVIDERS_DICT:\n        openai_inputs_filtered = [\n            input_field\n            for input_field in MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"]\n            if not (hasattr(input_field, \"name\") and input_field.name == \"json_mode\")\n        ]\n    else:\n        openai_inputs_filtered = []\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=i18n.t(\n                'components.agents.agent.agent_llm.display_name'),\n            info=i18n.t('components.agents.agent.agent_llm.info'),\n            options=[*MODEL_PROVIDERS_LIST],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            refresh_button=False,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key]\n                              for key in MODEL_PROVIDERS_LIST if key in MODELS_METADATA]\n            + [{\"icon\": \"brain\"}],\n            external_options={\n                \"fields\": {\n                    \"data\": {\n                        \"node\": {\n                            \"name\": \"connect_other_models\",\n                            \"display_name\": i18n.t('components.agents.agent.connect_other_models.display_name'),\n                            \"icon\": \"CornerDownLeft\",\n                        }\n                    }\n                },\n            },\n        ),\n        *openai_inputs_filtered,\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=i18n.t(\n                'components.agents.agent.system_prompt.display_name'),\n            info=i18n.t('components.agents.agent.system_prompt.info'),\n            value=i18n.t(\n                'components.agents.agent.system_prompt.default_value'),\n            advanced=False,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=i18n.t(\n                'components.agents.agent.n_messages.display_name'),\n            value=100,\n            info=i18n.t('components.agents.agent.n_messages.info'),\n            advanced=True,\n            show=True,\n        ),\n        MultilineInput(\n            name=\"format_instructions\",\n            display_name=i18n.t(\n                'components.agents.agent.format_instructions.display_name'),\n            info=i18n.t('components.agents.agent.format_instructions.info'),\n            value=i18n.t(\n                'components.agents.agent.format_instructions.default_value'),\n            advanced=True,\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=i18n.t(\n                'components.agents.agent.output_schema.display_name'),\n            info=i18n.t('components.agents.agent.output_schema.info'),\n            advanced=True,\n            required=False,\n            value=[],\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": i18n.t('components.agents.agent.table_schema.name.display_name'),\n                    \"type\": \"str\",\n                    \"description\": i18n.t('components.agents.agent.table_schema.name.description'),\n                    \"default\": \"field\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": i18n.t('components.agents.agent.table_schema.description.display_name'),\n                    \"type\": \"str\",\n                    \"description\": i18n.t('components.agents.agent.table_schema.description.description'),\n                    \"default\": i18n.t('components.agents.agent.table_schema.description.default'),\n                    \"edit_mode\": EditMode.POPOVER,\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": i18n.t('components.agents.agent.table_schema.type.display_name'),\n                    \"type\": \"str\",\n                    \"edit_mode\": EditMode.INLINE,\n                    \"description\": i18n.t('components.agents.agent.table_schema.type.description'),\n                    \"options\": [\"str\", \"int\", \"float\", \"bool\", \"dict\"],\n                    \"default\": \"str\",\n                },\n                {\n                    \"name\": \"multiple\",\n                    \"display_name\": i18n.t('components.agents.agent.table_schema.multiple.display_name'),\n                    \"type\": \"boolean\",\n                    \"description\": i18n.t('components.agents.agent.table_schema.multiple.description'),\n                    \"default\": \"False\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n            ],\n        ),\n        *LCToolsAgentComponent.get_base_inputs(),\n        # removed memory inputs from agent component\n        # *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=i18n.t(\n                'components.agents.agent.add_current_date_tool.display_name'),\n            advanced=True,\n            info=i18n.t('components.agents.agent.add_current_date_tool.info'),\n            value=True,\n        ),\n    ]\n    outputs = [\n        Output(name=\"response\", display_name=i18n.t(\n            'components.agents.agent.outputs.response.display_name'), method=\"message_response\"),\n    ]\n\n    async def get_agent_requirements(self):\n        \"\"\"Get the agent requirements for the agent.\"\"\"\n        try:\n            llm_model, display_name = await self.get_llm()\n            if llm_model is None:\n                error_msg = i18n.t(\n                    'components.agents.agent.errors.no_language_model')\n                raise ValueError(error_msg)\n\n            self.model_name = get_model_name(\n                llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n            if isinstance(self.chat_history, Message):\n                self.chat_history = [self.chat_history]\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    error_msg = i18n.t(\n                        'components.agents.agent.errors.current_date_tool_invalid')\n                    raise TypeError(error_msg)\n                self.tools.append(current_date_tool)\n\n            return llm_model, self.chat_history, self.tools\n\n        except (ValueError, TypeError) as e:\n            # Re-raise these as they already have i18n messages\n            raise\n        except Exception as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.agent_requirements_failed', error=str(e))\n            await logger.aerror(error_msg)\n            raise ValueError(error_msg) from e\n\n    async def message_response(self) -> Message:\n        try:\n            self.status = i18n.t(\n                'components.agents.agent.status.initializing_agent')\n            llm_model, self.chat_history, self.tools = await self.get_agent_requirements()\n\n            # Set up and run agent\n            self.status = i18n.t(\n                'components.agents.agent.status.setting_up_agent')\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n\n            self.status = i18n.t(\n                'components.agents.agent.status.creating_agent')\n            agent = self.create_agent_runnable()\n\n            self.status = i18n.t(\n                'components.agents.agent.status.running_agent')\n            result = await self.run_agent(agent)\n\n            # Store result for potential JSON output\n            self._agent_result = result\n\n            success_msg = i18n.t(\n                'components.agents.agent.success.agent_completed')\n            self.status = success_msg\n\n        except (ValueError, TypeError, KeyError) as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.agent_execution_failed', error=str(e))\n            await logger.aerror(f\"{type(e).__name__}: {e!s}\")\n            self.status = error_msg\n            raise\n        except ExceptionWithMessageError as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.exception_with_message', error=str(e))\n            await logger.aerror(f\"ExceptionWithMessageError occurred: {e}\")\n            self.status = error_msg\n            raise\n        # Avoid catching blind Exception; let truly unexpected exceptions propagate\n        except Exception as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.unexpected_error', error=str(e))\n            await logger.aerror(f\"Unexpected error: {e!s}\")\n            self.status = error_msg\n            raise\n        else:\n            return result\n\n    def _preprocess_schema(self, schema):\n        \"\"\"Preprocess schema to ensure correct data types for build_model_from_schema.\"\"\"\n        try:\n            processed_schema = []\n            for field in schema:\n                processed_field = {\n                    \"name\": str(field.get(\"name\", \"field\")),\n                    \"type\": str(field.get(\"type\", \"str\")),\n                    \"description\": str(field.get(\"description\", \"\")),\n                    \"multiple\": field.get(\"multiple\", False),\n                }\n                # Ensure multiple is handled correctly\n                if isinstance(processed_field[\"multiple\"], str):\n                    processed_field[\"multiple\"] = processed_field[\"multiple\"].lower() in [\n                        \"true\",\n                        \"1\",\n                        \"t\",\n                        \"y\",\n                        \"yes\",\n                    ]\n                processed_schema.append(processed_field)\n            return processed_schema\n\n        except Exception as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.schema_preprocessing_failed', error=str(e))\n            logger.aerror(error_msg)\n            raise ValueError(error_msg) from e\n\n    async def build_structured_output_base(self, content: str):\n        \"\"\"Build structured output with optional BaseModel validation.\"\"\"\n        try:\n            json_pattern = r\"\\{.*\\}\"\n            schema_error_msg = i18n.t(\n                'components.agents.agent.errors.try_setting_output_schema')\n\n            # Try to parse content as JSON first\n            json_data = None\n            try:\n                json_data = json.loads(content)\n            except json.JSONDecodeError:\n                json_match = re.search(json_pattern, content, re.DOTALL)\n                if json_match:\n                    try:\n                        json_data = json.loads(json_match.group())\n                    except json.JSONDecodeError:\n                        return {\"content\": content, \"error\": schema_error_msg}\n                else:\n                    return {\"content\": content, \"error\": schema_error_msg}\n\n            # If no output schema provided, return parsed JSON without validation\n            if not hasattr(self, \"output_schema\") or not self.output_schema or len(self.output_schema) == 0:\n                return json_data\n\n            # Use BaseModel validation with schema\n            try:\n                processed_schema = self._preprocess_schema(self.output_schema)\n                output_model = build_model_from_schema(processed_schema)\n\n                # Validate against the schema\n                if isinstance(json_data, list):\n                    # Multiple objects\n                    validated_objects = []\n                    for i, item in enumerate(json_data):\n                        try:\n                            validated_obj = output_model.model_validate(item)\n                            validated_objects.append(\n                                validated_obj.model_dump())\n                        except ValidationError as e:\n                            validation_error_msg = i18n.t('components.agents.agent.errors.validation_error_item',\n                                                          index=i, error=str(e))\n                            await logger.aerror(validation_error_msg)\n                            # Include invalid items with error info\n                            validated_objects.append(\n                                {\"data\": item, \"validation_error\": str(e)})\n                    return validated_objects\n\n                # Single object\n                try:\n                    validated_obj = output_model.model_validate(json_data)\n                    # Return as list for consistency\n                    return [validated_obj.model_dump()]\n                except ValidationError as e:\n                    validation_error_msg = i18n.t(\n                        'components.agents.agent.errors.validation_error_single', error=str(e))\n                    await logger.aerror(validation_error_msg)\n                    return [{\"data\": json_data, \"validation_error\": str(e)}]\n\n            except (TypeError, ValueError) as e:\n                error_msg = i18n.t(\n                    'components.agents.agent.errors.structured_output_build_failed', error=str(e))\n                await logger.aerror(error_msg)\n                # Fallback to parsed JSON without validation\n                return json_data\n\n        except Exception as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.structured_output_base_failed', error=str(e))\n            await logger.aerror(error_msg)\n            return {\"content\": content, \"error\": str(e)}\n\n    async def json_response(self) -> Data:\n        \"\"\"Convert agent response to structured JSON Data output with schema validation.\"\"\"\n        # Always use structured chat agent for JSON response mode for better JSON formatting\n        try:\n            self.status = i18n.t(\n                'components.agents.agent.status.building_structured_response')\n            system_components = []\n\n            # 1. Agent Instructions (system_prompt)\n            agent_instructions = getattr(self, \"system_prompt\", \"\") or \"\"\n            if agent_instructions:\n                system_components.append(f\"{agent_instructions}\")\n\n            # 2. Format Instructions\n            format_instructions = getattr(\n                self, \"format_instructions\", \"\") or \"\"\n            if format_instructions:\n                system_components.append(\n                    f\"{i18n.t('components.agents.agent.labels.format_instructions')}: {format_instructions}\")\n\n            # 3. Schema Information from BaseModel\n            if hasattr(self, \"output_schema\") and self.output_schema and len(self.output_schema) > 0:\n                try:\n                    processed_schema = self._preprocess_schema(\n                        self.output_schema)\n                    output_model = build_model_from_schema(processed_schema)\n                    schema_dict = output_model.model_json_schema()\n                    schema_info = i18n.t('components.agents.agent.prompts.schema_extraction',\n                                         schema=json.dumps(schema_dict, indent=2))\n                    system_components.append(schema_info)\n                except (ValidationError, ValueError, TypeError, KeyError) as e:\n                    error_msg = i18n.t(\n                        'components.agents.agent.errors.schema_build_for_prompt_failed', error=str(e))\n                    await logger.aerror(error_msg, exc_info=True)\n\n            # Combine all components\n            combined_instructions = \"\\n\\n\".join(\n                system_components) if system_components else \"\"\n\n            self.status = i18n.t(\n                'components.agents.agent.status.getting_agent_requirements_json')\n            llm_model, self.chat_history, self.tools = await self.get_agent_requirements()\n\n            self.status = i18n.t(\n                'components.agents.agent.status.setting_up_structured_agent')\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=combined_instructions,\n            )\n\n            # Create and run structured chat agent\n            try:\n                self.status = i18n.t(\n                    'components.agents.agent.status.creating_structured_agent')\n                structured_agent = self.create_agent_runnable()\n            except (NotImplementedError, ValueError, TypeError) as e:\n                error_msg = i18n.t(\n                    'components.agents.agent.errors.structured_agent_creation_failed', error=str(e))\n                await logger.aerror(error_msg)\n                raise\n            try:\n                self.status = i18n.t(\n                    'components.agents.agent.status.running_structured_agent')\n                result = await self.run_agent(structured_agent)\n            except (\n                ExceptionWithMessageError,\n                ValueError,\n                TypeError,\n                RuntimeError,\n            ) as e:\n                error_msg = i18n.t(\n                    'components.agents.agent.errors.structured_agent_result_failed', error=str(e))\n                await logger.aerror(error_msg)\n                raise\n\n            # Extract content from structured agent result\n            if hasattr(result, \"content\"):\n                content = result.content\n            elif hasattr(result, \"text\"):\n                content = result.text\n            else:\n                content = str(result)\n\n        except (\n            ExceptionWithMessageError,\n            ValueError,\n            TypeError,\n            NotImplementedError,\n            AttributeError,\n        ) as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.structured_chat_agent_failed', error=str(e))\n            await logger.aerror(error_msg)\n            # Fallback to regular agent\n            content_str = i18n.t(\n                'components.agents.agent.errors.no_content_from_agent')\n            return Data(data={\"content\": content_str, \"error\": str(e)})\n\n        # Process with structured output validation\n        try:\n            self.status = i18n.t(\n                'components.agents.agent.status.processing_structured_output')\n            structured_output = await self.build_structured_output_base(content)\n\n            # Handle different output formats\n            if isinstance(structured_output, list) and structured_output:\n                if len(structured_output) == 1:\n                    success_msg = i18n.t(\n                        'components.agents.agent.success.single_structured_output')\n                    self.status = success_msg\n                    return Data(data=structured_output[0])\n                success_msg = i18n.t(\n                    'components.agents.agent.success.multiple_structured_outputs', count=len(structured_output))\n                self.status = success_msg\n                return Data(data={\"results\": structured_output})\n            if isinstance(structured_output, dict):\n                success_msg = i18n.t(\n                    'components.agents.agent.success.dict_structured_output')\n                self.status = success_msg\n                return Data(data=structured_output)\n\n            fallback_msg = i18n.t(\n                'components.agents.agent.status.using_content_fallback')\n            self.status = fallback_msg\n            return Data(data={\"content\": content})\n\n        except (ValueError, TypeError) as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.structured_output_processing_failed', error=str(e))\n            await logger.aerror(error_msg)\n            self.status = error_msg\n            return Data(data={\"content\": content, \"error\": str(e)})\n\n    async def get_memory_data(self):\n        # TODO: This is a temporary fix to avoid message duplication. We should develop a function for this.\n        try:\n            messages = (\n                await MemoryComponent(**self.get_base_args())\n                .set(\n                    session_id=self.graph.session_id,\n                    order=\"Ascending\",\n                    n_messages=self.n_messages,\n                )\n                .retrieve_messages()\n            )\n            return [\n                message for message in messages if getattr(message, \"id\", None) != getattr(self.input_value, \"id\", None)\n            ]\n        except Exception as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.memory_data_retrieval_failed', error=str(e))\n            await logger.aerror(error_msg)\n            return []  # Return empty list as fallback\n\n    async def get_llm(self):\n        try:\n            if not isinstance(self.agent_llm, str):\n                return self.agent_llm, None\n\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                error_msg = i18n.t(\n                    'components.agents.agent.errors.invalid_model_provider', provider=self.agent_llm)\n                raise ValueError(error_msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except (AttributeError, ValueError, TypeError, RuntimeError) as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.llm_build_failed', provider=self.agent_llm, error=str(e))\n            await logger.aerror(error_msg)\n            final_error_msg = i18n.t(\n                'components.agents.agent.errors.llm_initialization_failed', error=str(e))\n            raise ValueError(final_error_msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        try:\n            model_kwargs = {}\n            for input_ in inputs:\n                if hasattr(self, f\"{prefix}{input_.name}\"):\n                    model_kwargs[input_.name] = getattr(\n                        self, f\"{prefix}{input_.name}\")\n            return component.set(**model_kwargs).build_model()\n        except Exception as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.model_build_failed', error=str(e))\n            raise ValueError(error_msg) from e\n\n    def set_component_params(self, component):\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                inputs = provider_info.get(\"inputs\")\n                prefix = provider_info.get(\"prefix\")\n                # Filter out json_mode and only use attributes that exist on this component\n                model_kwargs = {}\n                for input_ in inputs:\n                    if hasattr(self, f\"{prefix}{input_.name}\"):\n                        model_kwargs[input_.name] = getattr(\n                            self, f\"{prefix}{input_.name}\")\n\n                return component.set(**model_kwargs)\n            return component\n        except Exception as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.component_params_set_failed', error=str(e))\n            logger.aerror(error_msg)\n            return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        try:\n            for field in fields:\n                build_config.pop(field, None)\n        except Exception as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.field_deletion_failed', error=str(e))\n            self.log(error_msg, \"warning\")\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        try:\n            for key, value in build_config.items():\n                if isinstance(value, dict):\n                    if value.get(\"input_types\") is None:\n                        build_config[key][\"input_types\"] = []\n                elif hasattr(value, \"input_types\") and value.input_types is None:\n                    value.input_types = []\n            return build_config\n        except Exception as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.input_types_update_failed', error=str(e))\n            self.log(error_msg, \"warning\")\n            return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        try:\n            # Iterate over all providers in the MODEL_PROVIDERS_DICT\n            # Existing logic for updating build_config\n            if field_name in (\"agent_llm\",):\n                build_config[\"agent_llm\"][\"value\"] = field_value\n                provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n                if provider_info:\n                    component_class = provider_info.get(\"component_class\")\n                    if component_class and hasattr(component_class, \"update_build_config\"):\n                        # Call the component class's update_build_config method\n                        build_config = await update_component_build_config(\n                            component_class, build_config, field_value, \"model_name\"\n                        )\n\n                provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                    provider: (\n                        MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                        [\n                            MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                            for other_provider in MODEL_PROVIDERS_DICT\n                            if other_provider != provider\n                        ],\n                    )\n                    for provider in MODEL_PROVIDERS_DICT\n                }\n                if field_value in provider_configs:\n                    fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                    # Delete fields from other providers\n                    for fields in fields_to_delete:\n                        self.delete_fields(build_config, fields)\n\n                    # Add provider-specific fields\n                    if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                        build_config.update(fields_to_add)\n                    else:\n                        build_config.update(fields_to_add)\n                    # Reset input types for agent_llm\n                    build_config[\"agent_llm\"][\"input_types\"] = []\n                    build_config[\"agent_llm\"][\"display_name\"] = i18n.t(\n                        'components.agents.agent.agent_llm.display_name')\n                elif field_value == \"connect_other_models\":\n                    # Delete all provider fields\n                    self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                    # # Update with custom component\n                    custom_component = DropdownInput(\n                        name=\"agent_llm\",\n                        display_name=i18n.t(\n                            'components.agents.agent.custom_llm.display_name'),\n                        info=i18n.t('components.agents.agent.custom_llm.info'),\n                        options=[*MODEL_PROVIDERS_LIST],\n                        real_time_refresh=True,\n                        refresh_button=False,\n                        input_types=[\"LanguageModel\"],\n                        placeholder=i18n.t(\n                            'components.agents.agent.custom_llm.placeholder'),\n                        options_metadata=[\n                            MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST if key in MODELS_METADATA],\n                        external_options={\n                            \"fields\": {\n                                \"data\": {\n                                    \"node\": {\n                                        \"name\": \"connect_other_models\",\n                                        \"display_name\": i18n.t('components.agents.agent.connect_other_models.display_name'),\n                                        \"icon\": \"CornerDownLeft\",\n                                    },\n                                }\n                            },\n                        },\n                    )\n                    build_config.update(\n                        {\"agent_llm\": custom_component.to_dict()})\n                # Update input types for all fields\n                build_config = self.update_input_types(build_config)\n\n                # Validate required keys\n                default_keys = [\n                    \"code\",\n                    \"_type\",\n                    \"agent_llm\",\n                    \"tools\",\n                    \"input_value\",\n                    \"add_current_date_tool\",\n                    \"system_prompt\",\n                    \"agent_description\",\n                    \"max_iterations\",\n                    \"handle_parsing_errors\",\n                    \"verbose\",\n                ]\n                missing_keys = [\n                    key for key in default_keys if key not in build_config]\n                if missing_keys:\n                    error_msg = i18n.t(\n                        'components.agents.agent.errors.missing_required_keys', keys=str(missing_keys))\n                    raise ValueError(error_msg)\n\n            if (\n                isinstance(self.agent_llm, str)\n                and self.agent_llm in MODEL_PROVIDERS_DICT\n                and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n            ):\n                provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n                if provider_info:\n                    component_class = provider_info.get(\"component_class\")\n                    component_class = self.set_component_params(\n                        component_class)\n                    prefix = provider_info.get(\"prefix\")\n                    if component_class and hasattr(component_class, \"update_build_config\"):\n                        # Call each component class's update_build_config method\n                        # remove the prefix from the field_name\n                        if isinstance(field_name, str) and isinstance(prefix, str):\n                            field_name = field_name.replace(prefix, \"\")\n                        build_config = await update_component_build_config(\n                            component_class, build_config, field_value, \"model_name\"\n                        )\n            return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n        except Exception as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.build_config_update_failed', error=str(e))\n            await logger.aerror(error_msg)\n            raise ValueError(error_msg) from e\n\n    async def _get_tools(self) -> list[Tool]:\n        try:\n            component_toolkit = get_component_toolkit()\n            tools_names = self._build_tools_names()\n            agent_description = self.get_tool_description()\n            # TODO: Agent Description Depreciated Feature to be removed\n            description = f\"{agent_description}{tools_names}\"\n            tools = component_toolkit(component=self).get_tools(\n                tool_name=\"Call_Agent\",\n                tool_description=description,\n                callbacks=self.get_langchain_callbacks(),\n            )\n            if hasattr(self, \"tools_metadata\"):\n                tools = component_toolkit(\n                    component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n            return tools\n        except Exception as e:\n            error_msg = i18n.t(\n                'components.agents.agent.errors.tools_retrieval_failed', error=str(e))\n            await logger.aerror(error_msg)\n            return []  # Return empty list as fallback\n"
              },
              "format_instructions": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Output Format Instructions",
                "dynamic": false,
                "info": "Generic Template for structured output formatting. Valid only with Structured response.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "format_instructions",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are an AI that extracts structured JSON objects from unstructured text. Use a predefined schema with expected types (str, int, float, bool, dict). Extract ALL relevant instances that match the schema - if multiple patterns exist, capture them all. Fill missing or ambiguous values with defaults: null for missing values. Remove exact duplicates but keep variations that have different field values. Always return valid JSON in the expected format, never throw errors. If multiple objects can be extracted, return them all in the structured format."
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-5",
                  "gpt-5-mini",
                  "gpt-5-nano",
                  "gpt-5-chat-latest",
                  "o1",
                  "o3-mini",
                  "o3",
                  "o3-pro",
                  "o4-mini",
                  "o4-mini-high"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4o"
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Chat History Messages",
                "dynamic": false,
                "info": "Number of chat history messages to retrieve.",
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "output_schema": {
                "_input_type": "TableInput",
                "advanced": true,
                "display_name": "Output Schema",
                "dynamic": false,
                "info": "Schema Validation: Define the structure and data types for structured output. No validation if no output schema.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "output_schema",
                "placeholder": "",
                "required": false,
                "show": true,
                "table_icon": "Table",
                "table_schema": [
                  {
                    "default": "field",
                    "description": "Specify the name of the output field.",
                    "display_name": "Name",
                    "edit_mode": "inline",
                    "name": "name",
                    "type": "str"
                  },
                  {
                    "default": "description of field",
                    "description": "Describe the purpose of the output field.",
                    "display_name": "Description",
                    "edit_mode": "popover",
                    "name": "description",
                    "type": "str"
                  },
                  {
                    "default": "str",
                    "description": "Indicate the data type of the output field (e.g., str, int, float, bool, dict).",
                    "display_name": "Type",
                    "edit_mode": "inline",
                    "name": "type",
                    "options": [
                      "str",
                      "int",
                      "float",
                      "bool",
                      "dict"
                    ],
                    "type": "str"
                  },
                  {
                    "default": "False",
                    "description": "Set to True if this output field should be a list of the specified type.",
                    "display_name": "As List",
                    "edit_mode": "inline",
                    "name": "multiple",
                    "type": "boolean"
                  }
                ],
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "trigger_icon": "Table",
                "trigger_text": "Open table",
                "type": "table",
                "value": []
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are an deal finder assistant that helps find and compare the prices of products across different e-commerce platforms. You must use the Tavily Search API to find the URLs of the ecommerce platforms that sell these products. Then use the AgentQL tool to extract the prices of the product in those websites. Make sure to include the name of the product, the price of the product, the shop name, and the URL link of the page to where you can add the product to a cart or checkout immediately. The price and URL link has to be retrieved, so if it's not available or doesn't work don't include it.\n\nHere's how to write an AgentQL query:\n\nThe AgentQL query serves as the building block of your script. This guide shows you how AgentQL's query structure works and how to write a valid query.\n\n### Single term query\n\nA **single term query** enables you to retrieve a single element on the webpage. Here is an example of how you can write a single term query to retrieve a search box.\n\n```AgentQL\n{\n    search_box\n}\n```\n\n### List term query\n\nA **list term query** enables you to retrieve a list of similar elements on the webpage. Here is an example of how you can write a list term query to retrieve a list of prices of apples.\n\n```AgentQL\n{\n    apple_price[]\n}\n```\n\nYou can also specify the exact field you want to return in the list. Here is an example of how you can specify that you want the name and price from the list of products.\n\n```AgentQL\n{\n    products[] {\n        name\n        price(integer)\n    }\n}\n```\n\n### Combining single term queries and list term queries\n\nYou can query for both **single terms** and **list terms** by combining the preceding formats.\n\n```AgentQL\n{\n    author\n    date_of_birth\n    book_titles[]\n}\n```\n\n### Giving context to queries\n\nThere two main ways you can provide additional context to your queries.\n\n#### Structural context\n\nYou can nest queries within parent containers to indicate that your target web element is in a particular section of the webpage.\n\n```AgentQL\n{\n    footer {\n        social_media_links[]\n    }\n}\n```\n\n#### Semantic context\n\nYou can also provide a short description within parentheses to guide AgentQL in locating the right element(s).\n\n```AgentQL\n{\n    footer {\n        social_media_links(The icons that lead to Facebook, Snapchat, etc.)[]\n    }\n}\n```\n\n### Syntax guidelines\n\nEnclose all AgentQL query terms within curly braces `{}`. The following query structure isn't valid because the term \"social_media_links\" is wrongly enclosed within parenthesis`()`.\n\n```AgentQL\n( # Should be {\n    social_media_links(The icons that lead to Facebook, Snapchat, etc.)[]\n) # Should be }\n```\n\nYou can't include new lines in your semantic context. The following query structure isn't valid because the semantic context isn't contained within one line.\n\n```AgentQL\n{\n    social_media_links(The icons that lead\n        to Facebook, Snapchat, etc.)[]\n}\n```"
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-03SGo",
        "measured": {
          "height": 594,
          "width": 320
        },
        "position": {
          "x": 780.1868307050428,
          "y": 115.01999131645616
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 167.04286979104586,
      "y": 184.39616411908878,
      "zoom": 0.6920869578393206
    }
  },
  "description": "Searches and compares product prices across multiple e-commerce platforms. ",
  "endpoint_name": null,
  "id": "e60f747f-c5c4-4581-b3cb-d320af9f7dce",
  "is_component": false,
  "last_tested_version": "1.4.3",
  "name": "Price Deal Finder",
  "tags": [
    "web-scraping",
    "agents"
  ]
}