{
  "display_name": "Astra DB CQL",
  "description": "Create a tool to get transactional data from DataStax Astra DB CQL Table",
  "tool_name": {
    "display_name": "Tool Name",
    "info": "The name of the tool."
  },
  "tool_description": {
    "display_name": "Tool Description",
    "info": "The tool description to be passed to the model."
  },
  "keyspace": {
    "display_name": "Keyspace",
    "info": "The keyspace name within Astra DB where the data is stored."
  },
  "table_name": {
    "display_name": "Table Name",
    "info": "The name of the table within Astra DB where the data is stored."
  },
  "token": {
    "display_name": "Astra DB Application Token",
    "info": "Authentication token for accessing Astra DB."
  },
  "api_endpoint": {
    "display_name": "API Endpoint",
    "info": "API endpoint URL for the Astra DB service."
  },
  "projection_fields": {
    "display_name": "Projection fields",
    "info": "Attributes to return separated by comma."
  },
  "tools_params": {
    "display_name": "Tools Parameters",
    "info": "Define the structure for the tool parameters. Describe the parameters in a way the LLM can understand how to use them. Add the parameters respecting the table schema (Partition Keys, Clustering Keys and Indexed Fields).",
    "schema": {
      "name": {
        "display_name": "Name",
        "description": "Name of the field/parameter to be used by the model."
      },
      "field_name": {
        "display_name": "Field Name",
        "description": "Specify the column name to be filtered on the table. Leave empty if the attribute name is the same as the name of the field."
      },
      "description": {
        "display_name": "Description",
        "description": "Describe the purpose of the parameter."
      },
      "mandatory": {
        "display_name": "Is Mandatory",
        "description": "Indicate if the field is mandatory."
      },
      "is_timestamp": {
        "display_name": "Is Timestamp",
        "description": "Indicate if the field is a timestamp."
      },
      "operator": {
        "display_name": "Operator",
        "description": "Set the operator for the field. https://docs.datastax.com/en/astra-db-serverless/api-reference/documents.html#operators"
      }
    }
  },
  "partition_keys": {
    "display_name": "DEPRECATED: Partition Keys",
    "info": "Field name and description to the model"
  },
  "clustering_keys": {
    "display_name": "DEPRECATED: Clustering Keys",
    "info": "Field name and description to the model"
  },
  "static_filters": {
    "display_name": "Static Filters",
    "info": "Field name and value. When filled, it will not be generated by the LLM."
  },
  "number_of_results": {
    "display_name": "Number of Results",
    "info": "Number of results to return."
  },
  "errors": {
    "timestamp_parse_failed": "Could not parse date: {timestamp}",
    "timestamp_error": "Error parsing timestamp: {error} - Use the prompt to specify the date in the correct format",
    "request_failed": "Error on Astra DB CQL Tool {tool_name} request: {response}"
  },
  "logs": {
    "parsing_timestamp": "Parsing timestamp: {timestamp}",
    "timestamp_parsed": "Timestamp parsed successfully: {formatted}",
    "making_request": "Making request to Astra DB - Table: {table}, Keyspace: {keyspace}",
    "processing_params": "Processing {count} parameters",
    "using_static_filter": "Using static filter for field: {field}",
    "using_arg_value": "Using argument value for parameter: {param}",
    "request_url": "Request URL: {url}",
    "request_successful": "Request successful - Retrieved {count} results",
    "no_json_response": "No JSON response, status code: {status_code}",
    "creating_args_schema": "Creating arguments schema",
    "args_schema_created": "Arguments schema created with {field_count} fields",
    "building_tool": "Building tool: {tool_name}",
    "tool_built": "Tool built successfully: {tool_name}",
    "parsing_projection": "Parsing projection fields: {input_str}",
    "projection_parsed": "Projection parsed - {count} fields",
    "running_tool": "Running tool: {tool_name}",
    "tool_completed": "Tool execution completed - {count} results",
    "no_results": "No results returned"
  }
}